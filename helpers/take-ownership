#!/bin/sh

set -e # Exit immediately if a command exits with a non-zero status.
set -u # Treat unset variables as an error.

usage() {
    echo "usage: $(basename "$0") [--not-recursive] DIR [USER_ID GROUP_ID]

Take ownership of a directory.

Options:
  --not-recursive  Take ownership of the specified directory only, not its
                   content.

Arguments:

  DIR              Path to the directory.
  USER_ID          ID of the user that should own the directory.  If not set,
                   the USER_ID environment variable is used.
  GROUP_ID         ID of the group that should own the directory.  If not set,
                   the GROUP_ID environment variable is used.
"
}

RECURSIVE=true

if [ "${1:-}" = "--not-recursive" ]; then
    RECURSIVE=false
    shift
fi

# Handle the directory parameter.
if [ -z "${1:-}" ]; then
    echo "ERROR: Directory missing."
    echo ""
    usage
    exit 1
elif [ ! -e "$1" ]; then
    echo "ERROR: Directory not found: $1."
    exit 1
elif [ ! -d "$1" ]; then
    echo "ERROR: Not a directory: $1."
    exit 1
fi

DIR="$(cd "$1" && pwd)"

# Handle the user ID parameter.
if [ -n "${2:-}" ]; then
    USER_ID="$2"
elif [ -z "${USER_ID:-}" ]; then
    echo "ERROR: No user ID defined."
    exit 1
fi

# Handle the group ID parameter.
if [ -n "${3:-}" ]; then
    GROUP_ID="$3"
elif [ -z "${GROUP_ID:-}" ]; then
    echo "ERROR: No group ID defined."
    exit 1
fi

# Special care is done on the main directory and its children, because these
# could be mapped to a network share.
find "$DIR" -maxdepth 1 -type d | while read D
do
    if ! $RECURSIVE && [ "$D" != "$DIR" ]; then
        continue
    fi

    if ! chown $USER_ID:$GROUP_ID "$D" 2>/dev/null
    then
        # Failed to take ownership of directory.  This could happen when, for
        # example, the folder is mapped to a network share.  Continue if we
        # can write to it, else fail.
        set +e
        TMPFILE="$(su-exec $USER_ID mktemp "$D"/.test_XXXXXX)"
        RC=$?
        set -e
        if [ $RC -eq 0 ]; then
            # Success, we were able to write a file.
            su-exec $USER_ID rm "$TMPFILE"
        else
            echo "ERROR: Failed to take ownership and no write permission on $D."
            exit 1
        fi
    fi

    # We are done if recursivity is not wanted.
    if ! $RECURSIVE; then
        break
    fi

    # Take ownership of files and directories under the current directory.
    if [ "$D" = "$DIR" ]; then
        # We are handling the main directory.  Take ownership of files (only)
        # under it.
        find "$D" -maxdepth 1 -mindepth 1 -type f -print0 | xargs --no-run-if-empty -0 chown $USER_ID:$GROUP_ID
    else
        # We are handling a child directory of the main directory.  Take
        # ownership (recursively) of all files and folders under it.
        find "$D" -maxdepth 1 -mindepth 1 -print0 | xargs --no-run-if-empty -0 chown -R $USER_ID:$GROUP_ID
    fi
done

# vim:ft=sh:ts=4:sw=4:et:sts=4
